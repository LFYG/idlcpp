//DO NOT EDIT THIS FILE, it is generated by idlcpp
//http://www.idlcpp.org

#pragma once

#include "./Type.h"
#include "./Typedef.h"

namespace pafcore
{
	class PAFCORE_EXPORT VoidType : public Type
	{
	public:
		static ::pafcore::ClassType* GetType();
		virtual ::pafcore::ClassType* getType();
		virtual size_t getAddress();

		static void* AddressToPtr(::size_t address);
		static void* get_NullPtr();

	public:
		VoidType();
	public:
		virtual Metadata* findMember(const char* name);
	public:
		static VoidType* GetSingleton();
		
	};

	inline void* VoidType::AddressToPtr(size_t address)
	{
		return (void*)address;
	}
	inline void* VoidType::get_NullPtr()
	{
		return 0;
	}
	
}


template<>
struct RuntimeTypeOf<void>
{
	typedef ::pafcore::VoidType RuntimeType;
	enum {type_category = ::pafcore::void_object};
};

