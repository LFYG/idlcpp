//DO NOT EDIT THIS FILE, it is generated by idlcpp
//aifeng_peng@hotmail.com

#pragma once

#include "./Type.mh"
#include "./Enumerator.mh"
#include "./Typedef.mh"
#include "EnumType.mh"
#include "AutoRun.h"
#include "NameSpace.h"
#include "Result.h"
#include "Argument.h"
#include "InstanceField.h"
#include "StaticField.h"
#include "InstanceProperty.h"
#include "StaticProperty.h"
#include "InstanceMethod.h"
#include "StaticMethod.h"
#include "Enumerator.h"
#include "PrimitiveType.h"
#include "NullType.h"


namespace idlcpp
{

	__pafcore__EnumType_Type::__pafcore__EnumType_Type() : ::pafcore::ClassType("EnumType", ::pafcore::enum_type)
	{
		m_size = sizeof(::pafcore::EnumType);
		static BaseClass s_baseClasses[] =
		{
			{RuntimeTypeOf<::pafcore::Type>::RuntimeType::GetSingleton(), base_offset_of(::pafcore::EnumType, ::pafcore::Type)},
		};
		m_baseClasses = s_baseClasses;
		m_baseClassCount = array_size_of(s_baseClasses);
		static ::pafcore::Result s__getEnumeratorByName__1_Result(RuntimeTypeOf<::pafcore::Enumerator>::RuntimeType::GetSingleton(), false, ::pafcore::Result::by_ptr);
		static ::pafcore::Argument s__getEnumeratorByName__1_Arguments[] = 
		{
			::pafcore::Argument("name", RuntimeTypeOf<char>::RuntimeType::GetSingleton(), ::pafcore::Argument::by_ptr),
		};
		static ::pafcore::Result s__getEnumeratorByValue__1_Result(RuntimeTypeOf<::pafcore::Enumerator>::RuntimeType::GetSingleton(), false, ::pafcore::Result::by_ptr);
		static ::pafcore::Argument s__getEnumeratorByValue__1_Arguments[] = 
		{
			::pafcore::Argument("value", RuntimeTypeOf<int>::RuntimeType::GetSingleton(), ::pafcore::Argument::by_value),
		};
		static ::pafcore::Result s__getEnumeratorCount__0_Result(RuntimeTypeOf<::size_t>::RuntimeType::GetSingleton(), false, ::pafcore::Result::by_value);
		static ::pafcore::Result s__getEnumerator__1_Result(RuntimeTypeOf<::pafcore::Enumerator>::RuntimeType::GetSingleton(), false, ::pafcore::Result::by_ptr);
		static ::pafcore::Argument s__getEnumerator__1_Arguments[] = 
		{
			::pafcore::Argument("index", RuntimeTypeOf<::size_t>::RuntimeType::GetSingleton(), ::pafcore::Argument::by_value),
		};
		static ::pafcore::Overload s__getEnumeratorByName__Overloads[] = 
		{
			::pafcore::Overload(&s__getEnumeratorByName__1_Result, s__getEnumeratorByName__1_Arguments, 1),
		};
		static ::pafcore::Overload s__getEnumeratorByValue__Overloads[] = 
		{
			::pafcore::Overload(&s__getEnumeratorByValue__1_Result, s__getEnumeratorByValue__1_Arguments, 1),
		};
		static ::pafcore::Overload s__getEnumeratorCount__Overloads[] = 
		{
			::pafcore::Overload(&s__getEnumeratorCount__0_Result, 0, 0),
		};
		static ::pafcore::Overload s__getEnumerator__Overloads[] = 
		{
			::pafcore::Overload(&s__getEnumerator__1_Result, s__getEnumerator__1_Arguments, 1),
		};
		static ::pafcore::InstanceMethod s_methods[] = 
		{
			::pafcore::InstanceMethod("_getEnumeratorByName_", EnumType__getEnumeratorByName_, s__getEnumeratorByName__Overloads, 1),
			::pafcore::InstanceMethod("_getEnumeratorByValue_", EnumType__getEnumeratorByValue_, s__getEnumeratorByValue__Overloads, 1),
			::pafcore::InstanceMethod("_getEnumeratorCount_", EnumType__getEnumeratorCount_, s__getEnumeratorCount__Overloads, 1),
			::pafcore::InstanceMethod("_getEnumerator_", EnumType__getEnumerator_, s__getEnumerator__Overloads, 1),
		};
		m_methods = s_methods;
		m_methodCount = array_size_of(s_methods);
		static Metadata* s_members[] = 
		{
			&s_methods[0],
			&s_methods[1],
			&s_methods[2],
			&s_methods[3],
		};
		m_members = s_members;
		m_memberCount = array_size_of(s_members);
		::pafcore::NameSpace::GetGlobalNameSpace()->getNameSpace("pafcore")->registerMember(this);
	}

	void __pafcore__EnumType_Type::destroyInstance(void* address)
	{
		delete reinterpret_cast<::pafcore::RefCountObject<::pafcore::EnumType>*>(address);
	}

	void __pafcore__EnumType_Type::destroyArray(void* address)
	{
		delete_array(reinterpret_cast<::pafcore::RefCountObject<::pafcore::EnumType>*>(address));
	}

	void __pafcore__EnumType_Type::assign(void* dst, const void* src)
	{
		*(::pafcore::EnumType*)dst = *(const ::pafcore::EnumType*)src;
	}

	::pafcore::ErrorCode __pafcore__EnumType_Type::EnumType__getEnumeratorByName_(::pafcore::Variant* result, ::pafcore::Variant** args, int_t numArgs)
	{
		if(2 == numArgs)
		{
			if(args[0]->isConstant())
			{
				return ::pafcore::e_this_is_constant;
			}
			::pafcore::EnumType* self;
			if(!args[0]->castToReferencePtr(GetSingleton(), (void**)&self))
			{
				return ::pafcore::e_invalid_this_type;
			}
			char* a0;
			if(!args[1]->castToPrimitivePtr(RuntimeTypeOf<char>::RuntimeType::GetSingleton(), (void**)&a0))
			{
				return ::pafcore::e_invalid_arg_type_1;
			}
			::pafcore::Enumerator* res = self->_getEnumeratorByName_(a0);
			result->assignReferencePtr(RuntimeTypeOf<::pafcore::Enumerator>::RuntimeType::GetSingleton(), res, false, ::pafcore::Variant::by_ptr);
			return ::pafcore::s_ok;
		}
		return ::pafcore::e_invalid_arg_num;
	}

	::pafcore::ErrorCode __pafcore__EnumType_Type::EnumType__getEnumeratorByValue_(::pafcore::Variant* result, ::pafcore::Variant** args, int_t numArgs)
	{
		if(2 == numArgs)
		{
			if(args[0]->isConstant())
			{
				return ::pafcore::e_this_is_constant;
			}
			::pafcore::EnumType* self;
			if(!args[0]->castToReferencePtr(GetSingleton(), (void**)&self))
			{
				return ::pafcore::e_invalid_this_type;
			}
			int a0;
			if(!args[1]->castToPrimitive(RuntimeTypeOf<int>::RuntimeType::GetSingleton(), &a0))
			{
				return ::pafcore::e_invalid_arg_type_1;
			}
			::pafcore::Enumerator* res = self->_getEnumeratorByValue_(a0);
			result->assignReferencePtr(RuntimeTypeOf<::pafcore::Enumerator>::RuntimeType::GetSingleton(), res, false, ::pafcore::Variant::by_ptr);
			return ::pafcore::s_ok;
		}
		return ::pafcore::e_invalid_arg_num;
	}

	::pafcore::ErrorCode __pafcore__EnumType_Type::EnumType__getEnumeratorCount_(::pafcore::Variant* result, ::pafcore::Variant** args, int_t numArgs)
	{
		if(1 == numArgs)
		{
			if(args[0]->isConstant())
			{
				return ::pafcore::e_this_is_constant;
			}
			::pafcore::EnumType* self;
			if(!args[0]->castToReferencePtr(GetSingleton(), (void**)&self))
			{
				return ::pafcore::e_invalid_this_type;
			}
			::size_t res = self->_getEnumeratorCount_();
			result->assignPrimitive(RuntimeTypeOf<::size_t>::RuntimeType::GetSingleton(), &res);
			return ::pafcore::s_ok;
		}
		return ::pafcore::e_invalid_arg_num;
	}

	::pafcore::ErrorCode __pafcore__EnumType_Type::EnumType__getEnumerator_(::pafcore::Variant* result, ::pafcore::Variant** args, int_t numArgs)
	{
		if(2 == numArgs)
		{
			if(args[0]->isConstant())
			{
				return ::pafcore::e_this_is_constant;
			}
			::pafcore::EnumType* self;
			if(!args[0]->castToReferencePtr(GetSingleton(), (void**)&self))
			{
				return ::pafcore::e_invalid_this_type;
			}
			::size_t a0;
			if(!args[1]->castToPrimitive(RuntimeTypeOf<::size_t>::RuntimeType::GetSingleton(), &a0))
			{
				return ::pafcore::e_invalid_arg_type_1;
			}
			::pafcore::Enumerator* res = self->_getEnumerator_(a0);
			result->assignReferencePtr(RuntimeTypeOf<::pafcore::Enumerator>::RuntimeType::GetSingleton(), res, false, ::pafcore::Variant::by_ptr);
			return ::pafcore::s_ok;
		}
		return ::pafcore::e_invalid_arg_num;
	}

	__pafcore__EnumType_Type* __pafcore__EnumType_Type::GetSingleton()
	{
		static __pafcore__EnumType_Type s_instance;
		return &s_instance;
	}

}

AUTO_REGISTER_TYPE(::idlcpp::__pafcore__EnumType_Type)
